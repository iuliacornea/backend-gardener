openapi: "3.0.0"
info:
  version: 1.0.0
  title: Gardener API
  license:
    name: UTCN
servers:
  - url: http://gardener.swagger.io/v1
paths:
  /plants:
    get:
      summary: List of all plant objects
      operationId: getPlants
      tags: 
        - plants
      responses:
        '200':
          description: All plants of the application
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plants"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Save or update a plant object. If no id is provided, we will create a new plant. If an id is provided, we will update all the fields of the plant, this includes updating to 'null' the fields which are not sent. 
      operationId: postPlant
      tags:
        - plants
      requestBody:
        description: A plant object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Plant'
      responses:
        '201':
          description: Created
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - pets
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a pet
      operationId: createPets
      tags:
        - pets
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /pets/{petId}:
    get:
      summary: Info for a specific pet
      operationId: showPetById
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Plant:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          format: uuid
        soil:
          $ref: '#/components/schemas/Soil'
    Plants:
      type: array
      items:
        $ref: '#/components/schemas/Plant'
    Soil:
      type: string
      enum: ['SUCCULENTS', 'ORCHID', 'CONIFERS', 'REGULAR']
    Pet:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    Pets:
      type: array
      items:
        $ref: "#/components/schemas/Pet"
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
