openapi: "3.0.0"
info:
  version: 1.0.0
  title: Gardener API
  license:
    name: UTCN
servers:
  - url: http://gardener.swagger.io/v1
paths:
  /plants:
    get:
      summary: List of all plant objects
      operationId: getPlants
      tags:
        - plants
      responses:
        '200':
          description: All plants of the application
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plants"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Save or update a plant object. If no id is provided, we will create a new plant. If an id is provided, we will update all the fields of the plant, this includes updating to 'null' the fields which are not sent.
      operationId: postPlant
      tags:
        - plants
      requestBody:
        description: A plant object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Plant'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plant'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Plant:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        features:
          $ref: '#/components/schemas/PlantFeature'
        soilType:
          $ref: '#/components/schemas/SoilType'
    Plants:
      type: array
      items:
        $ref: '#/components/schemas/Plant'
    PlantFeature:
      type: object
      properties:
        id:
          type: string
          format: uuid
        stemType:
          $ref: '#/components/schemas/StemType'
        stemSpikes:
          $ref: '#/components/schemas/StemSpikes'
        leafDivisionOfBlade:
          $ref: '#/components/schemas/LeafDivisionOfBlade'
        leafArrangementOnTheStem:
          $ref: '#/components/schemas/LeafArrangementOnTheStem'
        leafSurface:
          $ref: '#/components/schemas/LeafSurface'
        leafTexture:
          $ref: '#/components/schemas/LeafTexture'
        leafVeinType:
          $ref: '#/components/schemas/LeafVeinType'
        flowerExistance:
          $ref: '#/components/schemas/FlowerExistance'
        flowerShape:
          $ref: '#/components/schemas/FlowerShape'
        flowerPetals:
          $ref: '#/components/schemas/FlowerPetals'
    StemType:
      type: string
      enum: ['WOODY', 'HERBACEOUS', 'NOT_VISIBLE']
    StemSpikes:
      type: string
      enum: ['NO', 'WOODY', 'SOFT']
    LeafDivisionOfBlade:
      type: string
      enum: ['SIMPLE', 'WITH_LEAFLETS', 'PINNATE_COMPOUND', 'PALMATE_COMPOUND' ,'DOUBLE_COMPOUND']
    LeafArrangementOnTheStem:
      type: string
      enum: ['BASAL', 'WHORLED', 'ALTERNATE', 'OPPOSITE']
    LeafSurface:
      type: string
      enum: ['SMOOTH', 'HAIRY', 'WARTY', 'PLEATED', 'ROUGHENED_RIDGES', 'GROOVED']
    LeafTexture:
      type: string
      enum: ['LEATHERY', 'STICKY', 'FLESHY', 'GRASSY', 'NEEDLE', 'RUGOSE', 'SPIKE']
    LeafVeinType:
      type: string
      enum: ['ARCUATE', 'CROSS_VENULATE', 'DICHTOMOUS', 'LONGITUDINAL', 'PALMATE', 'PARALLEL', 'PINNATE', 'RETICULATE', 'ROTATE']
    FlowerExistance:
      type: string
      enum: ['YES', 'NO']
    FlowerShape:
      type: string
      enum: ['REGULAR', 'IREGULAR']
    FlowerPetals:
      type: string
      enum: ['UNITED', 'SEPARATED', 'FAN']
    GrowingConfiguration:
      type: object
      properties:
        soilType:
          $ref: '#/components/schemas/SoilType'
        soilQuantity:
          type: number
        soilHumiditySummer:
          $ref: '#/components/schemas/FiveDegreeScale'
        soilHumidityWinter:
          $ref: '#/components/schemas/FiveDegreeScale'
        airHumidity:
          $ref: '#/components/schemas/FiveDegreeScale'
        airTemperatureSummer:
          type: number
        airTemperatureWinter:
          type: number
        lightIntensitySummer:
          $ref: '#/components/schemas/FiveDegreeScale'
        lightIntensityWinter:
          $ref: '#/components/schemas/FiveDegreeScale'
    SoilType:
      type: string
      enum: ['SUCCULENTS', 'ORCHID', 'CONIFERS', 'REGULAR']
    FiveDegreeScale:
      type: string
      enum: ['VERY_LOW', 'LOW', 'MEDIUM', 'HIGH', 'VERY_HIGH']
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
