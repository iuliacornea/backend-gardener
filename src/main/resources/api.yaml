openapi: "3.0.0"
info:
  version: 1.0.0
  title: Gardener API
  license:
    name: UTCN
servers:
  - url: http://gardener.swagger.io/v1
paths:
  /orders:
    post:
      summary: Save or update the given order.
      operationId: postOrder
      tags:
        - orders
      parameters:
        - in: query
          name: userToken
          required: true
          schema:
            type: string
          description: The token of the user making the request
      requestBody:
        description: A gardener order
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GardenerOrderDto'
      responses:
        '200':
          description: Order was registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GardenerOrderDto'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      summary: Get the orders base on the given params.
      operationId: getOrders
      tags:
        - orders
      parameters:
        - in: query
          name: userToken
          required: true
          schema:
            type: string
          description: The token of the user making the request
        - in: query
          name: status
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/OrderStatus'
          description: Filter orders by this statuses
      responses:
        '200':
          description: Orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GardenerOrderDtos'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /gardeners:
    get:
      summary: 'Get all the gardeners'
      operationId: getGardeners
      tags:
        - gardeners
      parameters:
        - in: query
          name: userToken
          required: true
          schema:
            type: string
          description: The token of the user making the request
      responses:
        '200':
          description: Gardeners
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GardenerDtos'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /greenhouse/stats:
    post:
      summary: The statistics registered by a gardener
      operationId: postStats
      tags:
        - greenhouse
      requestBody:
        description: A greenhouse status
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GreenhouseMessageDto'
      responses:
        '200':
          description: The configuration for the gardener to apply to the current greenhouse
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GreenhouseConfigDto"
    get:
      summary: The statistics registered by for the given gardener/specimen
      operationId: getStats
      tags:
        - greenhouse
      parameters:
        - in: query
          name: userToken
          required: true
          schema:
            type: string
          description: The token of the user who makes the request
        - in: query
          name: gardenerId
          required: false
          schema:
            type: string
            format: uuid
          description: Filters the results by the given gardenerId
        - in: query
          name: specimenId
          required: false
          schema:
            type: string
            format: uuid
          description: Filters the results by the given specimenId
      responses:
        '200':
          description: List of stats for the given params
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GreenhouseStatsDtos"
  /users/signup:
    post:
      summary: Create a new user with the given credentials.
      operationId: signUpUser
      tags:
        - authentication
      requestBody:
        description: User credentials
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDto"
      responses:
        '200':
          description: Sign up successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/login:
    post:
      summary: Login with the given credentials. Retrieve the user token
      operationId: loginUser
      tags:
        - authentication
      requestBody:
        description: User credentials
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDto"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/logout:
    post:
      summary: Logout user with the given token
      operationId: logoutUser
      tags:
        - authentication
      parameters:
        - in: query
          name: userToken
          required: true
          schema:
            type: string
          description: The token of the user to be logged out
      responses:
        '200':
          description: Logout successful
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /plants:
    get:
      summary: List of all plant objects
      operationId: getPlants
      tags:
        - plants
      parameters:
        - in: query
          name: userToken
          required: false
          schema:
            type: string
          description: The token of the user who makes the request
      responses:
        '200':
          description: All plants of the application
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlantTypeDtos"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Save or update a plant object. If no id is provided, we will create a new plant. If an id is provided, we will update all the fields of the plant, this includes updating to 'null' the fields which are not sent.
      operationId: postPlant
      tags:
        - plants
      parameters:
        - in: query
          name: userToken
          required: true
          schema:
            type: string
          description: The token of the user who makes the request
      requestBody:
        description: A plant object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlantTypeDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlantTypeDto'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /plants/{id}:
    get:
      summary: One plant
      operationId: getPlant
      tags:
        - plants
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Uuid of the plant
      responses:
        '200':
          description: The plant with the matching id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlantTypeDto"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete the plant with the give id
      operationId: deletePlant
      tags:
        - plants
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Uuid of the plant
        - in: query
          name: userToken
          required: true
          schema:
            type: string
          description: The token of the user who makes the request
      responses:
        '200':
          description: The plant with the matching id was deleted.
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /featureConfigurations:
    get:
      tags:
        - features
      summary: List of all feature configuration objects
      operationId: getFeatureConfigurations
      responses:
        '200':
          description: All feature configurations of the application
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeaturesConfigurationDtos"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - features
      summary: Save or update a feature configuration object. If no id is provided, we will create a new feature configuration. If an id is provided, we will update all the fields of the feature configuration, this includes updating to 'null' the fields which are not sent.
      operationId: postFeatureConfiguration
      parameters:
        - in: query
          name: userToken
          required: true
          schema:
            type: string
          description: The token of the user who makes the request
      requestBody:
        description: A feature configuration object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeaturesConfigurationDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeaturesConfigurationDto'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /featureConfigurations/{id}:
    get:
      tags:
        - features
      summary: One feature configuration
      operationId: getFeatureConfiguration
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Uuid of the feature configuration
      responses:
        '200':
          description: The feature configuration with the matching id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeaturesConfigurationDto"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - features
      summary: Delete the feature configuration with the give id
      operationId: deleteFeatureConfiguration
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Uuid of the feature configuration
        - in: query
          name: userToken
          required: true
          schema:
            type: string
          description: The token of the user who makes the request
      responses:
        '200':
          description: The feature configuration with the matching id was deleted.
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /growingConfigurations:
    get:
      tags:
        - growingConfigs
      summary: List of all growing configurations objects
      operationId: getGrowingConfigurations
      responses:
        '200':
          description: All growing configurations of the application
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GrowingConfigurationDtos"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - growingConfigs
      summary: Save or update a growing configurations object. If no id is provided, we will create a new growing configuration. If an id is provided, we will update all the fields of the growing configuration, this includes updating to 'null' the fields which are not sent.
      operationId: postGrowingConfiguration
      parameters:
        - in: query
          name: userToken
          required: true
          schema:
            type: string
          description: The token of the user who makes the request
      requestBody:
        description: A growing configuration object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrowingConfigurationDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GrowingConfigurationDto'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /growingConfigurations/{id}:
    get:
      tags:
        - growingConfigs
      summary: One growing configuration
      operationId: getGrowingConfiguration
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Uuid of the growing configuration
      responses:
        '200':
          description: The growing configuration with the matching id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GrowingConfigurationDto"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - growingConfigs
      summary: Delete the growing configuration with the give id
      operationId: deleteGrowingConfiguration
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Uuid of the growing configuration
        - in: query
          name: userToken
          required: true
          schema:
            type: string
          description: The token of the user who makes the request
      responses:
        '200':
          description: The growing configuration with the matching id was deleted.
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /specimens:
    get:
      summary: List of all specimen objects of the given user
      operationId: getSpecimens
      tags:
        - specimens
      parameters:
        - in: query
          name: userToken
          required: true
          schema:
            type: string
          description: The token of the user who makes the request
      responses:
        '200':
          description: All specimens of the user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpecimenDtos"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Save or update a specimen object. If no id is provided, we will create a new specimen. If an id is provided, we will update all the fields of the specimen, this includes updating to 'null' the fields which are not sent.
      operationId: postSpecimen
      tags:
        - specimens
      parameters:
        - in: query
          name: userToken
          required: true
          schema:
            type: string
          description: The token of the user who makes the request
      requestBody:
        description: A specimen object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpecimenDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecimenDto'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /specimens/{id}:
    get:
      summary: One specimen
      operationId: getSpecimen
      tags:
        - specimens
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Uuid of the specimen
        - in: query
          name: userToken
          required: true
          schema:
            type: string
          description: The token of the user who makes the request
      responses:
        '200':
          description: The specimen with the matching id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpecimenDto"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete the specimen with the give id
      operationId: deleteSpecimen
      tags:
        - specimens
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Uuid of the specimen
        - in: query
          name: userToken
          required: true
          schema:
            type: string
          description: The token of the user who makes the request
      responses:
        '200':
          description: The specimen with the matching id was deleted.
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    GardenerDto:
      required: ['name','userId','wifiNetwork','wifiPassword', 'createdAt', 'order']
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        userId:
          type: string
          format: uuid
        wifiNetwork:
          type: string
        wifiPassword:
          type: string
        order:
          $ref: '#/components/schemas/GardenerOrderDto'
        createdAt:
          type: string
          format: date-time
    GardenerDtos:
      type: array
      items:
        $ref: '#/components/schemas/GardenerDto'
    GardenerOrderDto:
      required: ['gardenerName', 'userId', 'wifiNetwork', 'wifiPassword']
      properties:
        id:
          type: string
          format: uuid
        gardenerName:
          type: string
        userId:
          type: string
          format: uuid
        wifiNetwork:
          type: string
        wifiPassword:
          type: string
        createdAt:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/OrderStatus'
        lastUpdate:
          type: string
          format: date-time
    GardenerOrderDtos:
      type: array
      items:
        $ref: '#/components/schemas/GardenerOrderDto'
    GreenhouseMessageDto:
      required: ['userId', 'gardenerId', 'airTemperature', 'airHumidity', 'soilMoisture', 'lightIntensity']
      properties:
        userId:
          type: string
          format: uuid
        gardenerId:
          type: string
          format: uuid
        airTemperature:
          type: integer
        airHumidity:
          type: integer
        soilMoisture:
          type: integer
        lightIntensity:
          type: integer
      additionalProperties: false
    GreenhouseConfigDto:
      properties:
        soilMoisture:
          type: integer
    GreenhouseStatsDto:
      required: ['id', 'userId', 'gardenerId']
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        gardenerId:
          type: string
          format: uuid
        specimenId:
          type: string
          format: uuid
        airTemperatureRaw:
          type: integer
        airHumidityRaw:
          type: integer
        soilMoistureRaw:
          type: integer
        lightIntensityRaw:
          type: integer
        airTemperatureCelsius:
          type: integer
        airHumidityPercentage:
          type: integer
        soilMoisturePercentage:
          type: integer
        lightIntensityLux:
          type: integer
        receivedAt:
          type: string
          format: date-time
    GreenhouseStatsDtos:
      type: array
      items:
        $ref: '#/components/schemas/GreenhouseStatsDto'
    UserDto:
      required: ['email', 'password', 'username', 'role']
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        password:
          type: string
        username:
          type: string
        token:
          type: string
        role:
          $ref: '#/components/schemas/UserRole'
    PlantTypeDto:
      required: ['name', 'featuresConfiguration', 'growingConfiguration']
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        image:
          type: string
        featuresConfiguration:
          $ref: '#/components/schemas/FeaturesConfigurationDto'
        growingConfiguration:
          $ref: '#/components/schemas/GrowingConfigurationDto'
        userId:
          type: string
          format: uuid
    PlantTypeDtos:
      type: array
      items:
        $ref: '#/components/schemas/PlantTypeDto'
    FeaturesConfigurationDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        stemType:
          $ref: '#/components/schemas/StemType'
        stemSpikes:
          $ref: '#/components/schemas/StemSpikes'
        leafDivisionOfBlade:
          $ref: '#/components/schemas/LeafDivisionOfBlade'
        leafArrangementOnTheStem:
          $ref: '#/components/schemas/LeafArrangementOnTheStem'
        leafSurface:
          $ref: '#/components/schemas/LeafSurface'
        leafTexture:
          $ref: '#/components/schemas/LeafTexture'
        leafVeinType:
          $ref: '#/components/schemas/LeafVeinType'
        flowerExistance:
          $ref: '#/components/schemas/FlowerExistance'
        flowerShape:
          $ref: '#/components/schemas/FlowerShape'
        flowerPetals:
          $ref: '#/components/schemas/FlowerPetals'
    FeaturesConfigurationDtos:
      type: array
      items:
        $ref: '#/components/schemas/FeaturesConfigurationDto'
    GrowingConfigurationDto:
      type: object
      required: ['name']
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        airHumidityMin:
          type: integer
        airHumidityMax:
          type: integer
        airTemperatureSummerMin:
          type: integer
        airTemperatureSummerMax:
          type: integer
        airTemperatureWinterMin:
          type: integer
        airTemperatureWinterMax:
          type: integer
        lightIntensityMin:
          type: integer
        lightIntensityMax:
          type: integer
        soilMoistureSummerMin:
          type: integer
        soilMoistureSummerMax:
          type: integer
        soilMoistureWinterMin:
          type: integer
        soilMoistureWinterMax:
          type: integer
        userId:
          type: string
          format: uuid
        wateringIntervalDays:
          type: integer
    GrowingConfigurationDtos:
      type: array
      items:
        $ref: '#/components/schemas/GrowingConfigurationDto'
    SpecimenDto:
      required: ['name', 'userId']
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        plantType:
          $ref: '#/components/schemas/PlantTypeDto'
        growingConfiguration:
          $ref: '#/components/schemas/GrowingConfigurationDto'
        season:
          $ref: '#/components/schemas/Season'
        userId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
    SpecimenDtos:
      type: array
      items:
        $ref: "#/components/schemas/SpecimenDto"
    StemType:
      type: string
      enum: ['WOODY', 'HERBACEOUS', 'NOT_VISIBLE']
    StemSpikes:
      type: string
      enum: ['NO', 'WOODY', 'SOFT']
    LeafDivisionOfBlade:
      type: string
      enum: ['SIMPLE', 'WITH_LEAFLETS', 'PINNATE_COMPOUND', 'PALMATE_COMPOUND' ,'DOUBLE_COMPOUND']
    LeafArrangementOnTheStem:
      type: string
      enum: ['BASAL', 'WHORLED', 'ALTERNATE', 'OPPOSITE']
    LeafSurface:
      type: string
      enum: ['SMOOTH', 'HAIRY', 'WARTY', 'PLEATED', 'ROUGHENED_RIDGES', 'GROOVED']
    LeafTexture:
      type: string
      enum: ['LEATHERY', 'STICKY', 'FLESHY', 'GRASSY', 'NEEDLE', 'RUGOSE', 'SPIKE']
    LeafVeinType:
      type: string
      enum: ['ARCUATE', 'CROSS_VENULATE', 'DICHTOMOUS', 'LONGITUDINAL', 'PALMATE', 'PARALLEL', 'PINNATE', 'RETICULATE', 'ROTATE']
    FlowerExistance:
      type: string
      enum: ['YES', 'NO']
    FlowerShape:
      type: string
      enum: ['REGULAR', 'IREGULAR']
    FlowerPetals:
      type: string
      enum: ['UNITED', 'SEPARATED', 'FAN']
    SoilType:
      type: string
      enum: ['SUCCULENTS', 'ORCHID', 'CONIFERS', 'REGULAR']
    FiveDegreeScale:
      type: string
      enum: ['VERY_LOW', 'LOW', 'MEDIUM', 'HIGH', 'VERY_HIGH']
    Season:
      type: string
      enum: ['SPRING', 'SUMMER', 'AUTUMN', 'WINTER']
    OrderStatus:
      type: string
      enum: ['PENDING_APPROVAL', 'APPROVED', 'MODIFIED_PENDING_APPROVAL', 'CANCELLED', 'COMPLETED']
    UserRole:
      type: string
      enum: ['USER', 'ADMIN']

    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
        message:
          type: string
